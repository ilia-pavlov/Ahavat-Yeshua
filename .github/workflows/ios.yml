name: iOS Build and Test Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual triggering of the workflow
    inputs:
      build_type:
        description: "Type of build (e.g., Debug or Release)"
        required: false
        default: "Debug"

jobs:
  build-and-test:
    name: Build and Test using Xcode
    runs-on: macos-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Xcode
        run: |
          echo "Available Xcode versions:"
          xcversion list
          echo "Using default Xcode version."

      - name: Detect Scheme and Project Type
        id: detect-scheme
        run: |
          if [ -f *.xcworkspace ]; then
            echo "workspace=$(ls *.xcworkspace | head -n 1)" >> $GITHUB_ENV
            project_type="workspace"
          elif [ -f *.xcodeproj ]; then
            echo "project=$(ls *.xcodeproj | head -n 1)" >> $GITHUB_ENV
            project_type="project"
          else
            echo "No Xcode project or workspace found."
            exit 1
          fi
          scheme=$(xcodebuild -list -json | ruby -e "require 'json'; puts JSON.parse(STDIN.read)['project']['schemes'][0]")
          echo "scheme=$scheme" >> $GITHUB_ENV
          echo "Detected scheme: $scheme"
          echo "Detected project type: $project_type"

      - name: Build
        run: |
          xcodebuild build-for-testing \
            -scheme "$scheme" \
            -destination "platform=iOS Simulator,name=$(xcrun simctl list devices available | grep -m1 'iPhone' | awk -F '[()]' '{print $2}')" \
            -$project_type "${{ env.workspace || env.project }}"

      - name: Test
        run: |
          xcodebuild test-without-building \
            -scheme "$scheme" \
            -destination "platform=iOS Simulator,name=$(xcrun simctl list devices available | grep -m1 'iPhone' | awk -F '[()]' '{print $2}')" \
            -$project_type "${{ env.workspace || env.project }}"
